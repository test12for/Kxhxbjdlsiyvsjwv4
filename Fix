#include <opencv2/opencv.hpp>
#include <iostream>
#include <cmath>
#include <vector>
#include <cstdlib> // For random number generation

using namespace cv;
using namespace std;

// Cấu trúc để lưu thông tin về hitbox
struct Hitbox {
    Rect boundingBox;
    double area;

    Hitbox(Rect box) {
        boundingBox = box;
        area = box.area();  // Tính diện tích của hitbox
    }
};

// Cấu trúc để lưu thông tin về hitbox của người chơi
struct PlayerHitbox {
    Rect boundingBox;
    double damageWeight; // Trọng số của vùng gây sát thương

    PlayerHitbox(Rect box, double weight) {
        boundingBox = box;
        damageWeight = weight; // Trọng số vùng sát thương
    }
};

// Hàm kiểm tra xem tâm có nằm trong hitbox của đối thủ không
bool isCrosshairInHitbox(const Point& crosshair, const Hitbox& hitbox) {
    return hitbox.boundingBox.contains(crosshair);
}

// Hàm tìm vùng đầu đối thủ (vùng sát thương cao nhất)
Hitbox findHeadHitbox(const vector<Hitbox>& enemyHitboxes) {
    Hitbox headHitbox = enemyHitboxes[0];
    for (const auto& hitbox : enemyHitboxes) {
        if (hitbox.area > headHitbox.area) {
            headHitbox = hitbox;
        }
    }
    return headHitbox;
}

// Lớp để điều khiển tâm bắn trong ứng dụng
class DamageTargeting {
public:
    float dpi = 60.0f;
    float sensitivity = 200.0f;
    Point currentCenter = Point(0, 0);
    vector<Hitbox> damageZones;

    DamageTargeting() {
        // Các vùng sát thương (tạm giả lập)
        damageZones.push_back(Hitbox(Rect(100, 150, 50, 50)));
        damageZones.push_back(Hitbox(Rect(300, 400, 70, 70)));
        damageZones.push_back(Hitbox(Rect(500, 600, 90, 90)));
        damageZones.push_back(Hitbox(Rect(700, 800, 30, 30)));
    }

    // Di chuyển tâm đến mục tiêu
    void moveToTarget(Point target) {
        float distanceX = target.x - currentCenter.x;
        float distanceY = target.y - currentCenter.y;

        // Tính toán độ di chuyển theo DPI và sensitivity
        float movementX = distanceX * sensitivity / dpi;
        float movementY = distanceY * sensitivity / dpi;

        // Di chuyển tâm đến vị trí mục tiêu
        currentCenter = Point(currentCenter.x + movementX, currentCenter.y + movementY);
    }
};

// Lớp Player để giữ thông tin về người chơi
class Player {
public:
    Point position;
    Point crosshairPosition;  // Vị trí tâm của người chơi
    vector<PlayerHitbox> playerHitboxes;

    Player(Point pos) : position(pos), crosshairPosition(pos) {}

    // Kiểm tra xem tâm có nằm trong vùng hitbox của đối thủ không
    bool isCrosshairInEnemyHitbox(const Hitbox& hitbox) {
        return hitbox.boundingBox.contains(crosshairPosition);
    }

    // Cập nhật tâm nếu nó ra khỏi vùng hitbox của đầu
    void lockCrosshairInHeadHitbox(const Hitbox& headHitbox) {
        if (!isCrosshairInEnemyHitbox(headHitbox)) {
            // Nếu tâm ra ngoài vùng hitbox của đầu, kéo tâm lại vào vùng đầu
            crosshairPosition = Point(headHitbox.boundingBox.x + headHitbox.boundingBox.width / 2,
                                       headHitbox.boundingBox.y + headHitbox.boundingBox.height / 2);
            cout << "Tâm đã bị xích lại vào vùng đầu đối thủ!" << endl;
        }
    }
};

// Hàm bắn và điều chỉnh tâm ảo
void aimAndShoot(Mat& image, Point playerPosition, DamageTargeting& targeting, vector<Hitbox>& enemyHitboxes, vector<PlayerHitbox>& playerHitboxes, bool isShooting) {
    // Tìm vùng đầu đối thủ (vùng sát thương lớn nhất)
    Hitbox headHitbox = findHeadHitbox(enemyHitboxes);

    // Tìm hitbox của người chơi có sát thương lớn nhất (tạm giả lập)
    PlayerHitbox highestDamagePlayerHitbox = playerHitboxes[0];
    for (auto& playerHitbox : playerHitboxes) {
        if (playerHitbox.damageWeight > highestDamagePlayerHitbox.damageWeight) {
            highestDamagePlayerHitbox = playerHitbox;
        }
    }

    // Hiển thị thông tin hitbox sát thương cao nhất của người chơi
    cout << "Hitbox gây sát thương cao nhất của người chơi: "
         << "Vị trí (" << highestDamagePlayerHitbox.boundingBox.x << ", " << highestDamagePlayerHitbox.boundingBox.y << "), "
         << "Trọng số: " << highestDamagePlayerHitbox.damageWeight << endl;

    // Kiểm tra xem nếu tâm người chơi đang nằm trong vùng sát thương đầu của đối thủ
    bool isCrosshairInHead = isCrosshairInHitbox(highestDamagePlayerHitbox.boundingBox.tl(), headHitbox);
    Scalar crosshairColor = isCrosshairInHead ? Scalar(0, 0, 255) : Scalar(0, 255, 0);  // Màu đỏ nếu nằm trong đầu, xanh nếu không

    // Nếu đang bắn (isShooting == true), ghim vào vùng đầu đối thủ
    if (isShooting) {
        // Nếu tâm đang nằm trong vùng đầu, ghim lại vào vùng đầu của đối thủ
        if (isCrosshairInHead) {
            // Ghim vào trung tâm vùng đầu
            Point adjustedAim = Point(headHitbox.boundingBox.x + headHitbox.boundingBox.width / 2,
                                      headHitbox.boundingBox.y + headHitbox.boundingBox.height / 2);

            // Điều chỉnh tâm sao cho không bị lệch khỏi vùng đầu
            if (!headHitbox.boundingBox.contains(adjustedAim)) {
                // Nếu vị trí mới không nằm trong vùng đầu, đưa nó vào trong hitbox
                adjustedAim.x = max(headHitbox.boundingBox.x, min(adjustedAim.x, headHitbox.boundingBox.x + headHitbox.boundingBox.width));
                adjustedAim.y = max(headHitbox.boundingBox.y, min(adjustedAim.y, headHitbox.boundingBox.y + headHitbox.boundingBox.height));
            }

            // Di chuyển tâm đến vị trí đã ghim
            targeting.moveToTarget(adjustedAim);
        }
    }

    // Vẽ tâm của người chơi (đổi màu nếu cần)
    circle(image, targeting.currentCenter, 5, crosshairColor, -1);  // Tâm chuyển màu đỏ nếu bắn vào đầu

    // Giả lập bắn: Vẽ vệt bắn từ playerPosition đến aim
    line(image, playerPosition, targeting.currentCenter, Scalar(0, 0, 255), 2); // Vẽ vệt bắn màu đỏ

    // Hiển thị kết quả
    imshow("Aiming", image);
    waitKey(0);  // Để cửa sổ không đóng ngay lập tức
}

int main() {
    // Đọc ảnh hoặc tạo hình nền cho game
    Mat image = Mat::zeros(500, 500, CV_8UC3);

    // Vị trí của player (x, y)
    Point playerPosition(250, 250); 

    // Các hitbox của đối thủ (giả sử đã được xác định)
    vector<Hitbox> enemyHitboxes = {
        Hitbox(Rect(150, 150, 100, 150)), // Một hitbox của đối thủ
        Hitbox(Rect(350, 100, 80, 120))   // Một hitbox khác của đối thủ
    };

    // Các hitbox của người chơi (giả sử đã được xác định)
    vector<PlayerHitbox> playerHitboxes = {
        PlayerHitbox(Rect(200, 200, 50, 100), 15),  // Vùng có trọng số 15
        PlayerHitbox(Rect(300, 250, 60, 80), 20)    // Vùng có trọng số 20
    };

    // Tạo đối tượng điều khiển tâm bắn
    DamageTargeting targeting;

    bool isShooting = true;  // Giả sử người dùng đang giữ nút bắn

    // Tạo đối tượng Player và hitbox vùng đầu đối thủ
    Player player(playerPosition);
    Hitbox headHitbox(Rect(100, 100, 50, 70));  // Vùng đầu đối thủ

    // Cập nhật tâm nếu cần
    player.lockCrosshairInHeadHitbox(headHitbox);

    // Bắn và điều chỉnh tâm
    aimAndShoot(image, playerPosition, targeting, enemyHitboxes, playerHitboxes, isShooting);

    return 0;
}
